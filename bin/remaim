#!/usr/bin/env php
<?php
/**
 * ReMaIm â€“ Redmine to Phabricator Importer
 *
 * @package Ttf\Remaim
 *
 * @version  0.3.0
 * @since    0.0.1 First public release
 *
 * @author  Jonathan Jin <jonathan@tentwentyfour.lu>
 * @author  David Raison <david@tentwentyfour.lu>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 */

// There is a composer package for libphutil, but it's unofficial and not 100% compatible:
// https://packagist.org/packages/mtrunkat/libphutil
require_once __DIR__ . '/../vendor/autoload.php';
require_once '/usr/share/libphutil/src/__phutil_library_init__.php';

use Pimple\Container;
use Redmine\Client;

use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Exception\ParseException;

use Ttf\Remaim\Wizard;
use Ttf\Remaim\Journal;
use Ttf\Remaim\Facade\Redmine as RedmineFacade;

try {
    $resume = false;
    $options = getopt('r', ['resume']);
    if (!empty($options)
        && (isset($options['r']) || isset($options['resume']))
    ) {
        $resume = true;
    }
    $container = new Container();
    $yaml = new Parser();
    $container['config'] = $yaml->parse(file_get_contents(__DIR__ . '/../remaim.yml'));
} catch (ParseException $e) {
    printf(
        'Unable to parse the YAML string: %s',
        $e->getMessage()
    );
    exit(1);
}

/**
 * Services
 */
$container['redmine_client'] = function ($c) {
    return new Client(
        $c['config']['redmine']['host'],
        $c['config']['redmine']['user'],
        $c['config']['redmine']['password']
    );
};

$container['redmine'] = function ($c) {
    return new RedmineFacade($c['redmine_client']);
};

$container['conduit'] = function ($c) {
    $conduit = new \ConduitClient($c['config']['phabricator']['host']);
    $conduit->setConduitToken($c['config']['phabricator']['token']);
    return $conduit;
};

/**
 * Service factories
 */
$container['journal'] = $container->factory(function ($c) {
    return new Journal($c);
});

$wizard = new Wizard($container);
$wizard->run($resume);
